#!/bin/bash


source ../initialize_parameters.sh

CURRENT_DIR=$PWD

SCRIPTS_PATH=$DIR/src
EXPERIMENT_PATH=$DIR/EXPERIMENTS/Prueba16SbyRegion


echo -e "${LIGHTCYAN}Now please, enter the numbers of run sequencings (ex: 1,2,3):"
        read runNums

echo -e "${PURPLE}Activating Qiime2..."
source $DIR_CONDA
conda activate $QIIME2_ENV_NAME

# my_string=$runNums
# my_array=($(echo $my_string | tr "," "\n"))

#my_string=$runNums
array_runs=($(echo $runNums | tr "," "\n"))

# Importing samples to Qiime2
for run in "${array_runs[@]}"; do

    # MANIFEST_FILE=samples-manifest-run${run}.tsv

    # python3 prepare_fastqfiles_bymanifest.py $EXPERIMENT_PATH/$MANIFEST_FILE $run $EXPERIMENT_PATH/data

    # # 1) Convert fastq.gz to fastq so MetagenopicsPP can be used:
    # for file in $EXPERIMENT_PATH/data/data_run${run}/*.fastq.gz; do gzip -d "$file"; done

    # MANIFEST_FILE_RUN=$EXPERIMENT_PATH/data/manifest_data_run${run}.txt
    # # 2) Apply MetagenomicsPP plugin to divide reads by hypervariable region:
    # sh $DIR/MetagenomicsPP/mgpp.sh -m $MANIFEST_FILE_RUN -o $EXPERIMENT_PATH/cutprimers_output_manifest_run${run}

    # # 3) Reorganize samples in folders by Vregion:
    # #chmod +x $SCRIPTS_PATH/reorganize_samples_byVregion.py
    # python3 $SCRIPTS_PATH/reorganize_samples_byVregion.py $EXPERIMENT_PATH/cutprimers_output_manifest_run${run} $EXPERIMENT_PATH/cutprimers_output_sorted_run${run}

    # # 4) Write manifest files for reorganized files:
    # python3 $SCRIPTS_PATH/write_manifest_file.py $EXPERIMENT_PATH/cutprimers_output_sorted_run${run} ""


    # Convert Regions to array for for loop:
    #my_regions=V2,V3,V4,V67,V8,V9
    my_regions=V2,V3
    array_regions=($(echo $my_regions | tr "," "\n"))

    for Vregion in "${array_regions[@]}"; do
        # echo -e "${PURPLE}Importing samples from run $run and V region $Vregion to Qiime2..."
        # qiime tools import \
        # --type 'SampleData[SequencesWithQuality]' \
        # --input-path $EXPERIMENT_PATH/cutprimers_output_sorted_run${run}/manifest_${Vregion}.txt \
        # --input-format SingleEndFastqManifestPhred33V2 \
        # --output-path $EXPERIMENT_PATH/cutprimers_output_sorted_run${run}/samples-run${run}-${Vregion}.qza

        # echo -e "${PURPLE}Creating visualization for run $run and V region $Vregion..."
        # qiime demux summarize \
        # --i-data  $EXPERIMENT_PATH/cutprimers_output_sorted_run${run}/samples-run${run}-${Vregion}.qza \
        # --o-visualization $EXPERIMENT_PATH/cutprimers_output_sorted_run${run}/samples-run${run}-${Vregion}-demux.qzv


        # # Visualize the quality graphs for decide the DADA2 parameters. 
        # echo -e "${ORANGE}Before DADA2 step, you need to visualize samples.qza (through samples-demux.qzv) and decide the length of reads, so we can trunc by quality. When we work with more than one run, we need to decide the truncating length based on all the .qzv samples created. Take a look to all the graphs (one for each run) that have been opened up. (You will need to quit the viewer, pressing 'q', for the next file to open)"

        # for run in "${array_runs[@]}"; do
        #     echo -e "${PURPLE}Opening run $run and V region $Vregion .qzv visualization...${NC}"
        #     qiime tools view $EXPERIMENT_PATH/cutprimers_output_sorted_run${run}/samples-run${run}-${Vregion}-demux.qzv
        #     done

        # # Ask for truncating and trimming parameters:
        # echo -e "${LIGHTCYAN} Enter truncating length for V region $Vregion"
        # read trunc_lenVal_byVregion

        # mkdir -p $EXPERIMENT_PATH/cutprimers_qiime2/${Vregion}/dada2_output


        # for run in "${array_runs[@]}"; do

        # # Dada2 step
        #     echo -e "\n${PURPLE}Performing Dada2 for run $run for V region $Vregion...${NC}"
        #     qiime dada2 denoise-pyro \
        #         --i-demultiplexed-seqs $EXPERIMENT_PATH/cutprimers_output_sorted_run${run}/samples-run${run}-${Vregion}.qza \
        #         --p-trunc-len ${trunc_lenVal_byVregion} \
        #         --p-n-threads 4 \
        #         --o-representative-sequences $EXPERIMENT_PATH/cutprimers_qiime2/${Vregion}/dada2_output/samples-run${run}-${Vregion}-rep-seqs-pyro-${trunc_lenVal_byVregion}.qza \
        #         --o-table $EXPERIMENT_PATH/cutprimers_qiime2/${Vregion}/dada2_output/samples-run${run}-${Vregion}-table-pyro-${trunc_lenVal_byVregion}.qza \
        #         --o-denoising-stats $EXPERIMENT_PATH/cutprimers_qiime2/${Vregion}/dada2_output/samples-run${run}-${Vregion}-stats-dada2-pyro-${trunc_lenVal_byVregion}.qza \
        #         --verbose
            
        #         # Since the MetagenomicPP plugin has been used for separting reads by region and removing primers, no trimming will be used. 

        #         #Visualizing Resulting data...
        #         #Converting DADA2 artifact .qza to .qzv
        #         # qiime feature-table summarize \
        #         # --i-table $EXPERIMENT_PATH/cutprimers_output_sorted_run${run}/Dada2_output/samples-run${run}-${Vregion}-table-pyro.qza \
        #         # --o-visualization $EXPERIMENT_PATH/cutprimers_output_sorted_run${run}/Dada2_output/samples-run${run}-${Vregion}-table-pyro.qzv \
        #         # --m-sample-metadata-file ${CURRENT_DIR}/samples-metadata-run${run}.tsv

        #         qiime feature-table tabulate-seqs \
        #         --i-data $EXPERIMENT_PATH/cutprimers_qiime2/${Vregion}/dada2_output/samples-run${run}-${Vregion}-rep-seqs-pyro-${trunc_lenVal_byVregion}.qza \
        #         --o-visualization $EXPERIMENT_PATH/cutprimers_qiime2/${Vregion}/dada2_output/samples-run${run}-${Vregion}-rep-seqs-pyro-${trunc_lenVal_byVregion}.qzv

        #         qiime metadata tabulate \
        #         --m-input-file $EXPERIMENT_PATH/cutprimers_qiime2/${Vregion}/dada2_output/samples-run${run}-${Vregion}-stats-dada2-pyro-${trunc_lenVal_byVregion}.qza \
        #         --o-visualization $EXPERIMENT_PATH/cutprimers_qiime2/${Vregion}/dada2_output/samples-run${run}-${Vregion}-stats-dada2-pyro-${trunc_lenVal_byVregion}.qzv
        # done

        # echo -e "${ORANGE}Sometimes the truncating length value we choose may not be optimal. To be able to assess whether we should choose another value, we must view the statistics table that is created after the Dada2 step. To know if the chosen value is good, we must look at the percentage of reads that pass the filter. For example, 70% would not be bad. However, we can re-run the Dada2 step with another value to compare the percentages. Let's visualize the statistic tables of each run run:${NC}"
        
        # # Visualize statistic.qzv to know if the Dada2 parameters were the correct ones
        # for run in "${array_runs[@]}"
        # do
        #     qiime tools view $EXPERIMENT_PATH/cutprimers_qiime2/${Vregion}/dada2_output/samples-run${run}-${Vregion}-stats-dada2-pyro-${trunc_lenVal_byVregion}.qzv
        # done

        echo -e "${ORANGE}Once you have vizualize all the statistic tables... ${LIGHTCYAN} Do you want to re-run dada2 for V region ${Vregion}? (Write Yes or No)"
        read repeatDada2

        # Decide if Dada2 needs to be re-run
        if test ${repeatDada2} == "Yes"; then
            echo "LOL"
        elif test ${repeatDada2} == "No"; then
            echo "Merging dada2 outputs from different runs.. "
        
            #for Vregion in "${array_regions[@]}"; do
            INPUT_PATH=$EXPERIMENT_PATH/cutprimers_qiime2/${Vregion}/dada2_output
            # Merge table.qza files:
            input_files_table=()
            trunc_lengths=()
            for file in "$INPUT_PATH"/*-table-*.qza; do
                input_files_table+=("--i-tables $file")
                # Save used trunc_length
                if [[ $file =~ -([0-9]+)\.qza$ ]]; then
                    trunc_length="${BASH_REMATCH[1]}"
                    trunc_lengths+=("$trunc_length")
                fi

            done

            first_trunc_length="${trunc_lengths[0]}"

            # Create the merging qiime2 command line:
            merge_command="qiime feature-table merge ${input_files_table[@]} --o-merged-table $INPUT_PATH/merged-${Vregion}-table-pyro-trun${first_trunc_length}.qza --p-overlap-method sum"
            # Run command line:
            #eval $merge_command

            # NO NECESARIO:
            qiime metadata tabulate \
                --m-input-file $INPUT_PATH/merged-${Vregion}-table-pyro-trun${first_trunc_length}.qza \
                --o-visualization $INPUT_PATH/merged-${Vregion}-table-pyro-trun${first_trunc_length}.qzv
            

            # Encuentra todos los archivos .qza en la carpeta dada2_pyro
            input_files_repseq=()
            trunc_lengths=()
            for file in "$INPUT_PATH"/*-rep-seqs-*.qza; do
                input_files_repseq+=("--i-data $file")
            done

            # Create the merging qiime2 command line:
            merge_command_repseqs="qiime feature-table merge-seqs ${input_files_repseq[@]} --o-merged-data $INPUT_PATH/merged-${Vregion}-rep-seqs-pyro-trun${first_trunc_length}.qza"

            # Run command line:
            eval $merge_command_repseqs


            qiime metadata tabulate \
                --m-input-file $INPUT_PATH/merged-${Vregion}-rep-seqs-pyro-trun${first_trunc_length}.qza \
                --o-visualization $INPUT_PATH/merged-${Vregion}-rep-seqs-pyro-trun${first_trunc_length}.qzv

            %%bash
            ### Greengenes
            qiime feature-classifier classify-consensus-vsearch \
            --i-query $INPUT_PATH/merged-${Vregion}-table-pyro-trun${first_trunc_length}.qza  \
            --i-reference-reads ./taxonomy_db/gg_99_otus.qza \
            --i-reference-taxonomy ./taxonomy_db/gg_ref-taxonomy.qza \
            --o-classification ./cutprimers_qiime2/V2/taxonomy/V2_GreenGenes_taxonomy_dada2trun150.qza 


             qiime feature-classifier classify-consensus-vsearch \
         --i-query ${CURRENT_DIR}/Dada2_output/rep-seqs-${seqType}.qza \
         --i-reference-reads $DIR/DATABASES/GreenGenes_DB/gg_13_8_otus/97_otus_refs.qza \
         --i-reference-taxonomy $DIR/DATABASES/GreenGenes_DB/gg_13_8_otus/97_otu_taxonomy.qza \
         --p-strand 'both' \
         --p-threads 4 \
         --o-classification ${CURRENT_DIR}/Taxonomic-Analysis/taxonomy-${seqType}-gg97-vsearch.qza \
         --o-search-results ${CURRENT_DIR}/Taxonomic-Analysis/search-results-${seqType}-gg97-vsearch.qza





            #done
        fi



    done

done